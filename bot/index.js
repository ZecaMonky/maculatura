require('dotenv').config();
const { Telegraf, Scenes, session } = require('telegraf');
const { v2: cloudinary } = require('cloudinary');
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET
});

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const api = axios.create({
    baseURL: 'https://maculatura.onrender.com/api',
    headers: {
        'x-api-key': process.env.API_KEY
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –°—Ü–µ–Ω–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
const weightScene = new Scenes.BaseScene('weight');
weightScene.enter((ctx) => ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –º–∞–∫—É–ª–∞—Ç—É—Ä—ã –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:'));
weightScene.on('text', async (ctx) => {
    const weight = parseFloat(ctx.message.text);
    if (isNaN(weight) || weight <= 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
    }
    ctx.session.weight = weight;
    await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', {
        reply_markup: {
            keyboard: [[{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location: true }]],
            resize_keyboard: true
        }
    });
    return ctx.scene.enter('location');
});

// –°—Ü–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
const locationScene = new Scenes.BaseScene('location');
locationScene.on('location', async (ctx) => {
    const { latitude, longitude } = ctx.message.location;
    ctx.session.location = { latitude, longitude };
    await ctx.reply('–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ? (–¥–∞/–Ω–µ—Ç)', {
        reply_markup: { remove_keyboard: true }
    });
    return ctx.scene.enter('photo');
});

// –°—Ü–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
const photoScene = new Scenes.BaseScene('photo');
photoScene.on('text', async (ctx) => {
    if (ctx.message.text.toLowerCase() === '–Ω–µ—Ç') {
        return submitData(ctx);
    } else if (ctx.message.text.toLowerCase() === '–¥–∞') {
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:');
    } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"');
    }
});

photoScene.on('photo', async (ctx) => {
    try {
        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        const file_link = await ctx.telegram.getFileLink(photo.file_id);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary
        const uploadResult = await cloudinary.uploader.upload(file_link.href, {
            folder: 'waste-paper'
        });
        
        ctx.session.photoUrl = uploadResult.secure_url;
        return submitData(ctx);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"');
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function submitData(ctx) {
    try {
        const data = {
            userId: ctx.from.id,
            weight: ctx.session.weight,
            lat: ctx.session.location.latitude,
            lon: ctx.session.location.longitude,
            date: new Date().toISOString(),
            photoUrl: ctx.session.photoUrl || null
        };

        const response = await api.post('/surrender', data);
        
        if (response.status === 200) {
            await ctx.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üëç');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
    ctx.session = {};
    return ctx.scene.leave();
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Å–¥–∞—á–∏ –º–∞–∫—É–ª–∞—Ç—É—Ä—ã –≤–≤–µ–¥–∏—Ç–µ /surrender');
});

// –ö–æ–º–∞–Ω–¥–∞ /surrender –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–¥–∞—á–∏
bot.command('surrender', (ctx) => ctx.scene.enter('weight'));

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.command('stats', async (ctx) => {
    try {
        const response = await api.get(`/stats/${ctx.from.id}`);
        const stats = response.data;
        await ctx.reply(`–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ —Å–¥–∞–Ω–æ: ${stats.totalWeight} –∫–≥\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–∞—á: ${stats.count}`);
    } catch (error) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /history
bot.command('history', async (ctx) => {
    try {
        const response = await api.get(`/history/${ctx.from.id}`);
        const history = response.data;
        
        if (history.length === 0) {
            return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π');
        }

        const message = history.map((record, i) => 
            `${i + 1}. –î–∞—Ç–∞: ${new Date(record.date).toLocaleDateString()}\n   –í–µ—Å: ${record.weight} –∫–≥`
        ).join('\n\n');

        await ctx.reply(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n${message}`);
    } catch (error) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
    const commands = [
        '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
        '/surrender - –°–¥–∞—Ç—å –º–∞–∫—É–ª–∞—Ç—É—Ä—É',
        '/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
        '/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–ø–∏—Å–µ–π',
        '/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'
    ].join('\n');
    
    ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n${commands}`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Scenes.Stage([weightScene, locationScene, photoScene]);
bot.use(session());
bot.use(stage.middleware());

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
}); 